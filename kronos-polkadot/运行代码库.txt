================================================================
              如何运行 Kronos Docker 代码库
================================================================

⚠️  当前状态：Docker Desktop 未运行

================================================================

【第1步：启动 Docker Desktop】

重要！必须先启动 Docker Desktop！

方法1：开始菜单
  1. 点击 Windows 开始菜单
  2. 搜索 "Docker Desktop"
  3. 点击启动
  4. 等待右下角图标变绿（约 30 秒）

方法2：桌面图标
  1. 双击桌面的 Docker Desktop 图标
  2. 等待启动完成

验证 Docker 已启动：
  → 打开 PowerShell
  → 运行：docker --version
  → 应该显示版本号

================================================================

【第2步：启动 Kronos 服务】

方法A：使用自动脚本（推荐⭐）
  1. 右键点击：启动Docker并运行.ps1
  2. 选择"使用 PowerShell 运行"
  3. 脚本会自动检查 Docker 并启动服务

方法B：手动命令
  打开 PowerShell，运行：

  cd D:\code\Kronos_Polkadot_Template\kronos-polkadot
  docker-compose up -d

方法C：使用 RUN.ps1
  打开 PowerShell，运行：

  cd D:\code\Kronos_Polkadot_Template\kronos-polkadot
  .\RUN.ps1 start

================================================================

【第3步：等待服务启动（30-60秒）】

首次启动会：
  → 下载 Docker 镜像（如果没有）
  → 下载 AI 模型（约 100MB）
  → 初始化服务

后续启动会更快（5-10秒）

查看启动进度：
  docker-compose logs -f

================================================================

【第4步：访问应用】

在浏览器中打开：

主应用：http://localhost:3000
后端API：http://localhost:5000
AI服务：http://localhost:5001

================================================================

【常用命令】

启动服务：
  docker-compose up -d

停止服务：
  docker-compose down

查看状态：
  docker-compose ps

查看日志：
  docker-compose logs -f

重启服务：
  docker-compose restart

================================================================

【一键脚本】

我为您创建了多个启动脚本，选一个：

1. 启动Docker并运行.ps1  ⭐推荐
   → 自动检测并启动 Docker Desktop
   → 自动启动 Kronos 服务
   → 验证所有功能

2. RUN.ps1
   → 支持多种操作（start/stop/restart/logs）
   → 用法：.\RUN.ps1 start

3. START_HERE.ps1
   → 完整的检查和启动流程
   → 包含测试和验证

4. start-simple.ps1
   → 最简单的版本
   → 只启动服务，不做其他

================================================================

【检查服务状态】

运行以下命令查看：

docker-compose ps

应该看到：

NAME              STATUS           PORTS
kronos-backend    Up (healthy)     0.0.0.0:5000-5001
kronos-frontend   Up               0.0.0.0:3000

如果看到这个输出 → ✅ 服务正常运行

================================================================

【测试服务】

测试后端：
  Invoke-WebRequest -Uri "http://localhost:5000/health"

测试前端：
  start http://localhost:3000

测试 API：
  Invoke-WebRequest -Uri "http://localhost:5000/api/predict?symbol=BTC"

================================================================

【故障排查】

问题：Docker Desktop 未运行
  → 错误：pipe/dockerDesktopLinuxEngine not found
  → 解决：启动 Docker Desktop，等待 30 秒

问题：端口被占用
  → 错误：port is already allocated
  → 解决：
    netstat -ano | findstr :3000
    taskkill /PID <进程ID> /F

问题：服务一直重启
  → 查看日志：docker-compose logs backend
  → 重新构建：docker-compose build --no-cache

================================================================

【完整运行流程】

第1步：启动 Docker Desktop
  → 等待右下角图标变绿

第2步：打开 PowerShell

第3步：运行启动脚本
  cd D:\code\Kronos_Polkadot_Template\kronos-polkadot
  .\启动Docker并运行.ps1

第4步：等待提示
  → 脚本会自动完成所有操作
  → 最后提示是否打开浏览器
  → 输入 Y 并回车

第5步：使用应用
  → 浏览器会自动打开 http://localhost:3000
  → 连接钱包
  → 开始预测！

================================================================

【当前需要做的】

⚠️  立即操作：

1. 启动 Docker Desktop
   → 开始菜单 → 搜索 "Docker Desktop"
   → 启动应用
   → 等待右下角图标变绿

2. 运行启动脚本
   → 右键点击：启动Docker并运行.ps1
   → 选择"使用 PowerShell 运行"

3. 访问应用
   → http://localhost:3000

================================================================

【服务说明】

后端服务（kronos-backend）：
  → Node.js Express API
  → Python Flask AI 服务
  → 币安数据源
  → 端口：5000, 5001

前端服务（kronos-frontend）：
  → React + TypeScript
  → Material-UI
  → 多钱包支持
  → 端口：3000

网络：
  → kronos-network（Docker 桥接网络）

卷：
  → model-cache（AI 模型缓存）

================================================================

【现在就开始】

1. ✅ 启动 Docker Desktop（开始菜单 → Docker Desktop）
2. ✅ 等待 30 秒（让 Docker 完全启动）
3. ✅ 运行：.\启动Docker并运行.ps1
4. ✅ 访问：http://localhost:3000

总共需要：2-3 分钟

================================================================

已创建的运行脚本：

📄 启动Docker并运行.ps1  ← 最智能，推荐！
📄 RUN.ps1               ← 多功能
📄 START_HERE.ps1        ← 完整版
📄 start-simple.ps1      ← 简单版

选择一个使用即可！

================================================================

